source: airports is table('duckdb:data/airports.parquet') + {
  primary_key: code
  measure: airport_count is count()
  dimension: name is concat(code, '-', full_name )
}

source: flights_base is table('duckdb:data/flights.parquet') + {
  primary_key: id2

  rename: origin_code is origin
  rename: destination_code is destination


  join_one: origin is airports with origin_code

  // declare some resusable aggregate calculations
  //  see: https://malloydata.github.io/documentation/language/aggregates.html
  measure:
    flight_count is count()
    total_distance is sum(distance)
    origin_count is origin.count()
    total_distance_bucketed is round(sum(distance)/10000)

  query: distance_buckets_by_origin is {
    group_by: origin_code
    aggregate: total_distance_bucketed
  }
}

source: flights is flights_base + {
  join_one: with_measure is from(flights_base -> distance_buckets_by_origin) 
    on origin_code = with_measure.origin_code
}

run: flights -> {
  group_by: with_measure.total_distance_bucketed
  aggregate: flight_count
  order_by: 1 desc
}