--! styles flights.styles.json

source: carriers is table('duckdb:data/carriers.parquet') + {
  primary_key: code
  measure: carrier_count is count()
}

source: airports is table('duckdb:data/airports.parquet') + {
  primary_key: code
  measure: airport_count is count()
  dimension: name is concat(code, '-', full_name )
}

source: aircraft_models is table('duckdb:data/aircraft_models.parquet') + {
  primary_key: aircraft_model_code
  measure: aircraft_model_count is count()
}

source: aircraft is table('duckdb:data/aircraft.parquet') + {
  primary_key: tail_num
  measure: aircraft_count is count()
  // join, see: https://malloydata.github.io/documentation/language/join.html
  join_one: aircraft_models with aircraft_model_code
}


source: flights is table('duckdb:data/flights.parquet') + {
  primary_key: id2

  // rename some fields as from their physical names
  rename: origin_code is origin
  rename: destination_code is destination

  // join all the data sources
  //  see: https://malloydata.github.io/documentation/language/join.html

  join_one: carriers with carrier
  join_one: origin is airports with origin_code
  join_one: destination is airports with destination_code
  join_one: aircraft with tail_num


  // declare some resusable aggregate calculations
  //  see: https://malloydata.github.io/documentation/language/aggregates.html
  measure:
    flight_count is count()
    total_distance is sum(distance)
    destination_count is destination.airport_count
    origin_count is origin.count()

    // aggregates can be computed at any level of the graph
    //  see: https://malloydata.github.io/documentation/patterns/foreign_sums.html
    seats_for_sale is source.sum(aircraft.aircraft_models.seats)
    seats_owned is aircraft.sum(aircraft.aircraft_models.seats)
    average_plane_size is aircraft.avg(aircraft.aircraft_models.seats)
    average_flight_distance is distance.avg()

  // declare some queries:
  // see: https://malloydata.github.io/documentation/language/query.html
  query: top_carriers is {
    group_by: carriers.nickname
    aggregate:
      flight_count
      destination_count
      percentage_of_flights is flight_count/all(flight_count) *100
  }

  query: carriers_over_time is {
    group_by: dep_month is dep_time.month
    aggregate: flight_count
    group_by: carriers.nickname
    limit: 10000
  }

  query: top_origins is {
    top: 5
    group_by: origin.name
    aggregate:
      flight_count
      destination_count
      carriers.carrier_count
      percent_of_flights is flight_count/all(flight_count) *100
  }

  query: top_destinations is {
      top: 5
      group_by: destination.code, destination.full_name
      aggregate:
        flight_count
        percent_of_flights_to_destination
          is flight_count/all(flight_count)*100
    }

  query: by_month is {
    group_by: dep_month is dep_time.month
    aggregate: flight_count
  }

  query: by_manufacturer is {
      group_by: aircraft.aircraft_models.manufacturer
      aggregate: flight_count, aircraft.aircraft_count
      limit: 3
    }

  query: top_routes_map is {
    group_by:
      origin.latitude
      origin.longitude
      latitude2 is destination.latitude
      longitude2 is destination.longitude
    aggregate: flight_count
    limit: 100
  }

  query: carrier_dashboard is {
    aggregate: destination_count
    aggregate: flight_count
    nest:
      by_manufacturer
      by_month
    nest: hubs is {
      top: 5
      having: destination.airport_count > 1
      group_by: hub is origin.name
      aggregate:
        destination_count
        flight_count
    }
    nest: origin_dashboard is {
      top: 5
      group_by:
        code is origin_code,
        origin is origin.full_name,
        origin.city
      aggregate: flight_count
      nest: destinations_by_month_line_chart is {
        group_by: dep_month is dep_time.month
        aggregate: flight_count
        group_by: destination.name
      }
      nest: top_routes_map
    }
  }

  query: search_index is {
    index:
      *,
      origin.*,
      carriers.*,
      destination.*
  }
}
